<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
					    http://www.springframework.org/schema/tx
					    http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<context:annotation-config />

	<context:component-scan base-package="kr.or.pickme.controller" />	
	<context:component-scan base-package="kr.or.pickme.service" />	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

		
	<!-- 메일발송 클래스 -->
	<bean id="emailSend" class="kr.or.pickme.email.emailSend" />
	<bean id="simpleNotifier" class="kr.or.pickme.controller.Comp_email" />
	
 	<bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<value>
				resource.loader=class
				class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</value>
		</property>
	</bean>
	<!-- Tiles 설정하기   -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
	 <property name="definitions">
	  <list>
	   <value>/WEB-INF/spring/appServlet/Tiles.xml</value>
	  </list>
	 </property>
	</bean>
	<!-- Tiles 관련 Resolver 구성  -->
	<bean id="urlBasedViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	 	<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
	 	<property name="order" value="1" />
	</bean> 

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2" />
	</bean>
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">  
    	<property name="order" value="3"></property>
	</bean>
	
	<!-- fileupload -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"/><!-- 10MB -->
	</bean>
	
	<!-- fileupload 저장할 파일 경로 -->
	<bean id="uploadPath" class="java.lang.String">
		<constructor-arg value="C:\\kosta166\\upload"></constructor-arg>
	</bean>
	
	<!-- json view -->
	<bean name="jsonview" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
	 
	
	<!-- Transaction 만들기 -->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="driverManagerDataSource" /> 
   </bean>
	
	<!-- @Transactional 이 적용된 곳에 commit과 rollback을 관리하겠다 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>
